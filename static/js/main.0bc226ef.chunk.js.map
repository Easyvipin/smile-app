{"version":3,"sources":["Components/Navbar.js","Components/Footer.js","Components/Home.js","Components/Ten.js","Components/Prog.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","id","exact","to","Footer","href","src","alt","Home","state","loaded","joke","axios","get","then","res","setState","data","catch","err","response","this","lines","punchline","setup","Component","Ten","console","log","slice","map","key","Prog","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0bc226ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"nav\">\r\n      <h3 id=\"brand\">SmileApp :)</h3>\r\n      <ul className=\"nav-list\">\r\n        <li>\r\n          <NavLink exact to=\"/\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/Ten\">10Jokes</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/Prog\">Coders</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        <a href=\"https://github.com/Easyvipin\">\r\n          <img className=\"icon\" src=\"GitHub.png\" alt=\"\" />\r\n          @Easyvipin &copy;\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Home extends Component {\r\n  state = {\r\n    loaded: false,\r\n    joke: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://official-joke-api.appspot.com/random_joke\")\r\n      .then((res) => {\r\n        this.setState({\r\n          loaded: true,\r\n          joke: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loaded: false,\r\n          joke: err,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const response = this.state.joke;\r\n    const lines = (\r\n      <div className=\"container\">\r\n        <div className=\"lines\">\r\n          <p>{response.punchline}</p>\r\n          <p>\"{response.setup}\"</p>\r\n        </div>\r\n      </div>\r\n    );\r\n    return this.state.loaded === true ? (\r\n      lines\r\n    ) : (\r\n      <div className=\"container\"></div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Ten extends Component {\r\n  state = {\r\n    loaded: false,\r\n    joke: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://official-joke-api.appspot.com/random_ten\")\r\n      .then((res) => {\r\n        console.log(res.data.slice(0, 10));\r\n        this.setState({\r\n          loaded: true,\r\n          joke: res.data.slice(0, 10),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loaded: false,\r\n          joke: err,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const response = this.state.joke;\r\n    const lines = response.map((joke) => {\r\n      return (\r\n        <div className=\"container\" key={joke.id}>\r\n          <div className=\"lines\">\r\n            <p>{joke.punchline}</p>\r\n            <p>\"{joke.setup}\"</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n    return this.state.loaded === true ? (\r\n      lines\r\n    ) : (\r\n      <div className=\"container\"></div>\r\n    );\r\n  }\r\n}\r\nexport default Ten;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Prog extends Component {\r\n  state = {\r\n    loaded: false,\r\n    joke: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://official-joke-api.appspot.com/jokes/programming/ten\")\r\n      .then((res) => {\r\n        console.log(res.data.slice(0, 10));\r\n        this.setState({\r\n          loaded: true,\r\n          joke: res.data.slice(0, 10),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loaded: false,\r\n          joke: err,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const response = this.state.joke;\r\n    const lines = response.map((joke) => {\r\n      return (\r\n        <div className=\"container\" key={joke.id}>\r\n          <div className=\"lines\">\r\n            <p>{joke.punchline}</p>\r\n            <p>\"{joke.setup}\"</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n    return this.state.loaded === true ? (\r\n      lines\r\n    ) : (\r\n      <div className=\"container\"></div>\r\n    );\r\n  }\r\n}\r\nexport default Prog;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Navbar from \"./Components/Navbar\";\r\nimport Footer from \"./Components/Footer\";\r\nimport Home from \"./Components/Home\";\r\nimport Ten from \"./Components/Ten\";\r\nimport Prog from \"./Components/Prog\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/Ten\" component={Ten} />\r\n          <Route path=\"/Prog\" component={Prog} />\r\n\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}